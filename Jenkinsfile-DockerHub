pipeline {
    agent any
    
    environment {
        // Docker Hub configuration
        DOCKER_HUB_REGISTRY = 'docker.io'
        DOCKER_HUB_REPO = 'schemes3/financial-health-api'  // Replace with your Docker Hub username
        DOCKER_IMAGE_NAME = 'financial-health-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        
        // Docker Hub credentials ID (configured in Jenkins)
        DOCKER_HUB_CREDENTIALS = 'docker-hub-credentials'
        
        // Build information
        BUILD_DATE = sh(script: "date -u +'%Y-%m-%dT%H:%M:%SZ'", returnStdout: true).trim()
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                echo 'üîÑ Checking out source code from repository...'
                checkout scm
                
                // Display repository information
                sh '''
                    echo "Repository Information:"
                    echo "======================"
                    echo "Git Commit: ${GIT_COMMIT_SHORT}"
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Build Date: ${BUILD_DATE}"
                    echo "Workspace: ${WORKSPACE}"
                    echo ""
                    
                    echo "Repository Files:"
                    ls -la
                '''
            }
        }
        
        stage('Validate Dockerfile') {
            steps {
                echo 'üîç Validating Dockerfile...'
                script {
                    // Check if Dockerfile exists
                    if (!fileExists('Dockerfile')) {
                        error("‚ùå Dockerfile not found in repository root!")
                    }
                    
                    // Display Dockerfile content
                    sh '''
                        echo "Dockerfile Content:"
                        echo "=================="
                        cat Dockerfile
                        echo ""
                        
                        echo "Checking Dockerfile syntax..."
                        docker build --no-cache --target="" . > /dev/null 2>&1 || echo "Dockerfile validation completed"
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    // Build Docker image with multiple tags
                    def image = docker.build("${DOCKER_HUB_REPO}:${DOCKER_TAG}")
                    
                    // Tag the image with additional tags
                    sh """
                        # Tag with build number
                        docker tag ${DOCKER_HUB_REPO}:${DOCKER_TAG} ${DOCKER_HUB_REPO}:build-${BUILD_NUMBER}
                        
                        # Tag with git commit
                        docker tag ${DOCKER_HUB_REPO}:${DOCKER_TAG} ${DOCKER_HUB_REPO}:${GIT_COMMIT_SHORT}
                        
                        # Tag as latest (for main branch only)
                        if [ "${BRANCH_NAME}" = "main" ] || [ "${BRANCH_NAME}" = "master" ]; then
                            docker tag ${DOCKER_HUB_REPO}:${DOCKER_TAG} ${DOCKER_HUB_REPO}:latest
                            echo "‚úÖ Tagged as latest for main branch"
                        fi
                    """
                    
                    // Display built images
                    sh '''
                        echo ""
                        echo "Built Docker Images:"
                        echo "==================="
                        docker images | grep ${DOCKER_HUB_REPO} | head -10
                        
                        echo ""
                        echo "Image Details:"
                        echo "=============="
                        docker inspect ${DOCKER_HUB_REPO}:${DOCKER_TAG} --format='Size: {{.Size}} bytes'
                        docker inspect ${DOCKER_HUB_REPO}:${DOCKER_TAG} --format='Created: {{.Created}}'
                        docker inspect ${DOCKER_HUB_REPO}:${DOCKER_TAG} --format='Architecture: {{.Architecture}}'
                    '''
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'üß™ Testing Docker image functionality...'
                sh '''
                    echo "Starting container for testing..."
                    
                    # Run container in detached mode
                    CONTAINER_ID=$(docker run -d -p 5555:5001 ${DOCKER_HUB_REPO}:${DOCKER_TAG})
                    echo "Container ID: $CONTAINER_ID"
                    
                    # Wait for application to start
                    echo "Waiting for application to start..."
                    sleep 15
                    
                    # Test application health
                    echo "Testing application endpoints..."
                    
                    # Test home endpoint
                    if curl -f -s http://localhost:5555/ > /dev/null; then
                        echo "‚úÖ Home endpoint test passed"
                    else
                        echo "‚ùå Home endpoint test failed"
                        docker logs $CONTAINER_ID
                        docker stop $CONTAINER_ID
                        exit 1
                    fi
                    
                    # Test tips endpoint
                    if curl -f -s http://localhost:5555/tips > /dev/null; then
                        echo "‚úÖ Tips endpoint test passed"
                    else
                        echo "‚ùå Tips endpoint test failed"
                        docker logs $CONTAINER_ID
                        docker stop $CONTAINER_ID
                        exit 1
                    fi
                    
                    # Test POST endpoint
                    if curl -X POST -H "Content-Type: application/json" \
                            -d '{"tip": "Jenkins test tip"}' \
                            -f -s http://localhost:5555/tips > /dev/null; then
                        echo "‚úÖ POST endpoint test passed"
                    else
                        echo "‚ùå POST endpoint test failed"
                        docker logs $CONTAINER_ID
                        docker stop $CONTAINER_ID
                        exit 1
                    fi
                    
                    echo "‚úÖ All endpoint tests passed!"
                    
                    # Show application logs
                    echo ""
                    echo "Application Logs:"
                    echo "================"
                    docker logs $CONTAINER_ID | tail -20
                    
                    # Cleanup test container
                    docker stop $CONTAINER_ID
                    docker rm $CONTAINER_ID
                    
                    echo "‚úÖ Docker image testing completed successfully!"
                '''
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Running security scan on Docker image...'
                script {
                    try {
                        // Basic security checks
                        sh '''
                            echo "Checking image for common security issues..."
                            
                            # Check if running as root
                            if docker run --rm ${DOCKER_HUB_REPO}:${DOCKER_TAG} whoami | grep -q root; then
                                echo "‚ö†Ô∏è  Warning: Container running as root user"
                            else
                                echo "‚úÖ Container not running as root"
                            fi
                            
                            # Check image layers
                            echo ""
                            echo "Image Layer Information:"
                            echo "======================="
                            docker history ${DOCKER_HUB_REPO}:${DOCKER_TAG} --no-trunc
                            
                            # Check for secrets in image (basic check)
                            echo ""
                            echo "Basic secrets scan..."
                            docker run --rm ${DOCKER_HUB_REPO}:${DOCKER_TAG} find / -name "*.key" -o -name "*.pem" -o -name "*password*" 2>/dev/null || true
                        '''
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è  Security scan completed with warnings: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                echo 'üîê Logging into Docker Hub...'
                script {
                    // Login to Docker Hub using Jenkins credentials
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                        echo "‚úÖ Successfully logged into Docker Hub"
                        
                        // Verify login
                        sh '''
                            echo "Docker Hub login verification:"
                            docker info | grep -A 5 "Registry:"
                        '''
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo 'üì§ Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                        
                        // Push image with build number tag
                        echo "Pushing ${DOCKER_HUB_REPO}:${DOCKER_TAG}..."
                        def image = docker.image("${DOCKER_HUB_REPO}:${DOCKER_TAG}")
                        image.push()
                        
                        // Push image with build tag
                        echo "Pushing ${DOCKER_HUB_REPO}:build-${BUILD_NUMBER}..."
                        def buildImage = docker.image("${DOCKER_HUB_REPO}:build-${BUILD_NUMBER}")
                        buildImage.push()
                        
                        // Push image with git commit tag
                        echo "Pushing ${DOCKER_HUB_REPO}:${GIT_COMMIT_SHORT}..."
                        def commitImage = docker.image("${DOCKER_HUB_REPO}:${GIT_COMMIT_SHORT}")
                        commitImage.push()
                        
                        // Push latest tag only for main branch
                        if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master') {
                            echo "Pushing ${DOCKER_HUB_REPO}:latest..."
                            def latestImage = docker.image("${DOCKER_HUB_REPO}:latest")
                            latestImage.push()
                            echo "‚úÖ Latest tag pushed for main branch"
                        }
                        
                        echo "üéâ All images pushed successfully to Docker Hub!"
                    }
                }
            }
        }
        
        stage('Verify Push') {
            steps {
                echo '‚úÖ Verifying Docker Hub push...'
                sh '''
                    echo "Verification Information:"
                    echo "========================"
                    echo "Docker Hub Repository: ${DOCKER_HUB_REPO}"
                    echo "Tags pushed:"
                    echo "  - ${DOCKER_TAG}"
                    echo "  - build-${BUILD_NUMBER}"
                    echo "  - ${GIT_COMMIT_SHORT}"
                    
                    if [ "${BRANCH_NAME}" = "main" ] || [ "${BRANCH_NAME}" = "master" ]; then
                        echo "  - latest"
                    fi
                    
                    echo ""
                    echo "Docker Hub URL: https://hub.docker.com/r/${DOCKER_HUB_REPO}/tags"
                    echo ""
                    echo "To pull this image:"
                    echo "docker pull ${DOCKER_HUB_REPO}:${DOCKER_TAG}"
                    echo "docker pull ${DOCKER_HUB_REPO}:latest"
                    echo ""
                    echo "To run this image:"
                    echo "docker run -p 5001:5001 ${DOCKER_HUB_REPO}:${DOCKER_TAG}"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up...'
            sh '''
                # Remove test containers
                docker ps -a | grep ${DOCKER_HUB_REPO} | awk '{print $1}' | xargs -r docker rm -f || true
                
                # Clean up dangling images
                docker image prune -f || true
                
                # Keep only the 3 most recent local images to save space
                docker images ${DOCKER_HUB_REPO} --format "{{.Tag}}" | tail -n +4 | xargs -I {} docker rmi ${DOCKER_HUB_REPO}:{} || true
            '''
        }
        
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo """
            ========================================
            üöÄ DOCKER IMAGE PUBLISHED SUCCESSFULLY!
            ========================================
            
            Repository: ${DOCKER_HUB_REPO}
            Build Number: ${BUILD_NUMBER}
            Git Commit: ${GIT_COMMIT_SHORT}
            Build Date: ${BUILD_DATE}
            
            Docker Hub: https://hub.docker.com/r/${DOCKER_HUB_REPO}
            
            Pull command:
            docker pull ${DOCKER_HUB_REPO}:${DOCKER_TAG}
            
            Run command:
            docker run -p 5001:5001 ${DOCKER_HUB_REPO}:${DOCKER_TAG}
            ========================================
            """
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
            sh '''
                echo "Failure cleanup..."
                # Remove any test containers that might be running
                docker ps | grep ${DOCKER_HUB_REPO} | awk '{print $1}' | xargs -r docker stop || true
                docker ps -a | grep ${DOCKER_HUB_REPO} | awk '{print $1}' | xargs -r docker rm || true
            '''
        }
        
        unstable {
            echo '‚ö†Ô∏è  Pipeline completed with warnings!'
        }
    }
}

